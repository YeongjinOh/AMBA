#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('soma-amba:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// var redis = require('redis');


var Primus = require('primus');
var options = {
  transformer: "engine.io"
};
primus = new Primus(server,options);


//클라이언트에서 primus라이브러리를 사용하기 위한 용도
//primus.save(__dirname +'/primus.js');

//현재 연결된 소켓들
var count = 0;
//var sub = redis.createClient();
//var pub = redis.createClient();

/**
 * client가 server에 처음 접속하면 join이벤트로 채널에 가입을 하고 new이벤트로 이름을 할당받는다.
 * client로부터 send_msg이벤트가 발생하면 server에서는 해당 채털로 메시지를 전달하고
 * sub.on('message', func)에서 채널과 메시지를 파라미터로 전달받아
 * 해당 채널로 메시지를 전달하는 로직인데...
 */
//sub.subscribe('publishChannel');
//app/kakao용
primus.on('connection',function(spark){

//나중에는 세션으로 유저정보를 받으면 될듯하다.

  var currentSpark = spark;
  console.log('connected!');
  //클라이언트에 이름을 할당해준다.

  spark.write({action: 'new', message: {nickname: 'GUEST-'+count}});

  //소켓객체들을 저장한다
  //sparks['GUEST-'+count] = spark;
  //소켓별로 이름 할당
  spark._nickname = 'GUEST-'+count;
  count++;

  //채널 갯수,
  sub.on('subscribe', function (channel, count) {
    console.log('Subscribed on channel:', channel, ', count:', count);
  });
  /**
   * 채널에 가입되어있는 spark들을 알아야될것 같은데.
   * Redis에서 server로 메시지를 보낼 것을 기다리고 있다가
   * 메시지가 왔을 때, 소켓을 이용해서 브라우저로 메시지를 전달한다.
   *
   * !send_msg이벤트를 통해 채널에 메시지가 전달되면
   * 채널에 있는 소켓을 순회하는것 같다.
   */
    //pub.publish()를 호출하면 여기로 넘어간다
  sub.on('message', function (channel, message) {//메시지를 수신하면 발생하는 이벤트
    console.log("sub channel " + channel + ": " + message);
    if(channel == 'publishChannel'){
      var temp = JSON.parse(message);
      console.log("temp : ",temp);
      var msg = temp.msg;
      var username = temp.username;
      console.log("msg : " + msg + ", username : ", username);
      if(spark._nickname != username){
        spark.write({
          action : 'broadcast_msg',
          message : {
            username : username,
            msg : msg
          }
        });
      }
    }
  });

  spark.on('data', function(data){
    var action = data.action;

    if('join' == action){
      //커넥션이 되면 브라우저로부터 가입 요청을 받아서 'publishData'채널에 가입시킨다.
      if(action == 'join'){
        console.log('join the publishChannel');
        sub.subscribe('publishChannel');
      }
    }

    //메시지를 전송!!
    if('send_msg' == action){
      console.log('send_msg event : ', currentSpark._nickname);
      //var msg = data.message;
      var msg = data.message.msg;
      var username = data.message.username;

      var reply = JSON.stringify({
        username : username,
        msg: msg
      });
      //나중에는 data.message.room 같이 받아서 'publishData'에 room 이름을 넣으면 된다
      //publish할때 객체형을 전달할수 없다.
      pub.publish('publishChannel', reply);
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
