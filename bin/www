#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('soma-amba:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var redis = require('redis');


var Primus = require('primus');
var options = {
  transformer: "engine.io"
};
primus = new Primus(server,options);

var sub = redis.createClient();
var pub = redis.createClient();


primus.on('connection',function(spark){

  console.log('connected!');
  spark.up =
  spark.write({
    action : 'new',
    message : {
      msg : 'welcome'
    }
  });

  //채널 갯수,
  sub.on('subscribe', function (channel, count) {
    console.log('Subscribed on channel:', channel, ', count:', count);
  });


  //client로 부터 요청이 오면 이벤트 'data'이벤트 발생
  spark.on('data', function(data){
    var action = data.action;
    var message = data.message;

    if('join' == action){
      //커넥션이 되면 브라우저로부터 가입 요청을 받아서 'publishData'채널에 가입시킨다.
      if(action == 'join'){
        console.log('join the ', message.roomid);
        sub.subscribe(message.roomid);
      }
    }

    //메시지를 전송!!
    if('sendMessage' == action){
      var roomid = message.roomid;
      var msg = data.message.msg;
      var username = data.message.username;
      //메시지를 보낸사람
      spark.myname = username;

      var reply = JSON.stringify({
        username : username,
        msg: msg,
        roomid : roomid
      });
      pub.publish(roomid, reply);
    }
  });

  //pub.publish()를 호출하면 여기로 넘어간다
  sub.on('message', function (channel, message) {//메시지를 수신하면 발생하는 이벤트
    console.log("sub channel " + channel + " : " + message);
    var temp = JSON.parse(message);
    if(channel == temp.roomid){
      var msg = temp.msg;
      var username = temp.username;
      //console.log("msg : " + msg + ", username : ", username);

      if(spark.myname != username){
        spark.write({
          action : 'broadcast_msg',
          message : {
            roomid : channel,
            username : username,
            msg : msg
          }
        });
      }
    }
  });


});

primus.on('disconnection', function (spark) {
  console.log('disconnection');
// the spark that disconnected
  spark.end();
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
